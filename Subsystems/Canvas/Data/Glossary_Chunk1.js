define({'Layout':{d:'The layout of your Canvas View workspace. A .clx file is a Canvas layout file, saved from the Canvas View application. A layout file saves the configuration or \"layout\" of the view for future use.',l:''},'Log files folder':{d:'Logged information for the Canvas applications is written to comma separated files, (CanvasDebug001.csv, Canvas.View001.csv, and Canvas001.csv), which are stored in the Users\\CurrentUser\\AppData\\Local\\CygNet\\LogFiles\\Canvas directory on the host server. The Log file folder location is accessed in the Settings page of the Backstage view.',l:''},'Log viewer':{d:'The Log Viewer is where you can view the contents of the Canvas log files while inside the application. Errors can be viewed directly without opening the file from another application, such as Microsoft Excel.',l:''},'Logging levels':{d:'Canvas supports three logging levels: Normal (default), Detailed, and Debug (the most verbose level). The logging level is configured in the Backstage view in the Help option.',l:''},'Methods':{d:'Every Canvas control supports many methods that control the functionality, data display, appearance, and interaction of the control when applied to a Canvas screen or object. Methods are available in the Script view.',l:''},'Navigation by Facility':{d:'The Canvas navigation by facility feature allows you to navigate to a specific screen by selecting a CygNet facility. You can also specify optional facility record properties to be included when the navigation is triggered. Several navigation modes are available depending on your desired usage:\n- hyperlink to a facility\u0027s associated screen in a new window\n- hyperlink and replace the current screen with a facility\u0027s associated screen (with or without a navigation toolbar)\n- notify any Navigator controls on the current screen to replace the active screen in the Navigator with a facility\u0027s associated screen (with or without a navigation toolbar)\n- navigate to a facility screen by firing a screen script event\nConfiguration of this feature is required in the Canvas global settings, in the facility record in your CygNet system, and in the Facility navigation mode property on the hyperlinking screen.',l:''},'Object library':{d:'The object library is a collection of Canvas objects stored on the local Windows file system, or in a BSS for system-wide access. The object library must be configured in the Backstage view in order to see your objects in the Toolbox pane. The object library is configured in the Settings page of the Backstage view.',l:''},'Pan and zoom':{d:'Canvas screens and objects include a configurable navigation pane that allows you to pan around, zoom in and out, and auto fit the Canvas screen in both design and run mode. Pan and zoom are always enabled in design mode, and optional in run mode. See the Properties pane for the Screen and Object to enable this feature. The Chart control also supports panning and zooming capabilities in run mode. See the Chart properties to enable these features.',l:''},'Preview (or run) mode':{d:'Displays your screen as if it were output in a Canvas Viewer dialog box, with all non-printing elements suppressed (grids, rulers, guides, non-printing objects). Includes a navigational toolbar with a refresh button, SiteService selector and Facility selector.',l:''},'Properties':{d:'Every Canvas control supports many properties that control the functionality, data display, appearance, and interaction of the control when applied to a Canvas screen or object. Properties are available in the Properties pane and the Script view.',l:''},'Property inheritance':{d:'Canvas supports an explicit relationship between screens, objects, and controls, where certain property values, such as SiteService and facility tags, are passed from one element to another via an inheritance framework. Screens, objects, and controls can be configured as property senders or property receivers, and provide configuration options where you can explicitly define the source of the SiteService and facility. Depending on how you have your screens, objects, and controls set up, the SiteService and facility can come from any one of the following sources: A) from itself — indicated by selecting \u003cSelf\u003e and then explicitly configuring the property B) inherited from the screen — indicated by selecting Screen, which is always present as a sender or C) inherited from another control — indicated by selecting the name of the sending control.',l:''},'Receiver':{d:'A Canvas control that is able to be configured to receive a SiteService and/or facility tag from another control. Also see Broadcast.',l:''},'Relative Facilities':{d:'The Relative Facilities feature allows you to combine data from multiple Facility services and multiple facilities into a single relative facility definition for use on any screen or object. For any given facility you can configure a relationship or syntax to define a path to another facility in your CygNet environment. Relative facilities can also be used to associate a facility in a hierarchy with a closely related facility that is not in a hierarchy. For example, you could use relative facilities to associate a well facility that is in a hierarchy with a meter facility that is not, so you can build a screen to show data from other facilities without having to hard-code the objects on a screen. Relative facilities are configured in the Settings page of the Backstage view.',l:''},'Script language':{d:'Canvas supports two scripting languages for screens and objects: C# and VB.NET. C# is the default scription language. A screen\u0027s scripting language cannot be changed after the screen is created. The default scripting language is configured in the Settings page of the Backstage view. Also see C# and VB.NET.',l:''},'Script mode':{d:'Each Canvas screen and object has a Script mode and a Design mode. Use Ctrl+T to toggle between the two modes.',l:''},'Sender':{d:'A Canvas control that is able to be configured to send its SiteService and/or facility tag to another control. Also see Broadcast.',l:''},'Settings':{d:'The Settings page in the Backstage view is where you configure several global settings used universally by the Canvas application or settings automatically associated with a screen or object when it is created. For example, folder location for local settings, log file and global settings, relative facilities, object library contents, default script language, and default date format.',l:''},'Tag Chooser pane':{d:'The Tag Chooser control displays a hierarchical tree of CygNet facilities and points. You can select any item in the tree an drag it to other control on your screen to populate the control with CygNet data. The Tag Chooser is available as a control in the Toolbox pane and/or as a standalone pane. The hierarchy can be organized by facility attributes or group nodes.',l:''},'Templated screen':{d:'An Object is a simple Canvas screen containing one or more controls, which can be used on one or many screens. The controls on an object might represent assets such as a well or compressor or device or facility. Once configured, you can drop an object onto many different screens. If you need to make a single edit to any one control on an object, you simply change the master object, save the object, and all screens containing that object will be automatically updated. Any change made to an object will affect all instances of that object on any Canvas screen where it is used. Objects are analogous to templated screens in CygNet Studio.',l:''},'Toolbox pane':{d:'The Toolbox pane contains the various collections of controls and objects available for use on your screens grouped by type, and identified by an icon. Use the Toolbox pane to manage, preview, and select controls and objects to incorporate onto your screens.',l:''},'VB.NET':{d:'Canvas supports two scripting languages for screens and objects: C# and VB.NET. C# is the default scription language. A screen\u0027s scripting language cannot be changed after the screen is created. The default scripting language is configured in the Settings page of the Backstage view. Also see C#.',l:''},'Workspace':{d:'The Canvas workspace is the saved window layout containing your screen creation environment.You can customize the workspace to suit you design and scripting needs. The workspace is saved each time you exit the application. You can reset the workspace to the application default by deleting the canvas.workspace file.',l:''},'Zoom and pan':{d:'Canvas screens and objects include a configurable navigation pane that allows you to pan around, zoom in and out, and auto fit the Canvas screen in both design and run mode. Pan and zoom are always enabled in design mode, and optional in run mode. See the Properties pane for the Screen and Object to enable this feature. The Chart control also supports panning and zooming capabilities in run mode. See the Chart properties to enable these features.',l:''}});