define({'.can':{d:'A .can file is the final output product of the Canvas application. Screens are saved with .can file extension.',l:''},'.ccf':{d:'A .ccf is a Canvas chart file, which is created when saving a chart\u0027s configuration in run mode. See Default Chart for more information.',l:''},'.clx':{d:'A .clx file is a Canvas layout file, saved from the Canvas View application. A layout file saves the configuration or \\\"layout\\\" of the view for future use. Also see Canvas View.',l:''},'.cob':{d:'A .cob file is a Canvas object file, a simple Canvas screen containing one or more controls, which can be used on one or many screens. Also see Object control.',l:''},'.csf':{d:'A .csf file is a CygNet Studio file, saved from the CygNet Studio application. A .csf file can be opened and viewed in a read-only state in Canvas View. Also see Canvas View.',l:''},'.csv':{d:'A .csv file is a comma-separated values file. The Canvas log files are stored in .csv format.',l:''},'.gsf':{d:'A .gsf file is a global settings file. Canvas screens use a set of global settings which are common to all screens and objects. The location of the global settings file is configured in the Settings page of the Backstage view. Also see Global Settings.',l:''},'.svg':{d:'A .svg file is an image file format supported for the customizable alarm icon in the Alarm Grid and the Image control.',l:''},'Backstage view':{d:'The Backstage view is the area in Canvas where all application support is provided, including: opening new and existing screens, saving screens, adding plugins, configuring general and global settings, launching this help, sending feedback, accessing the About Canvas page, exiting the application.',l:''},'Broadcast':{d:'Broadcasting is a Canvas feature that allows you to manipulate and pass the SiteService and facility from one screen to another using the Canvas user interface without writing script. See Interscreen Communication.',l:''},'Broadcast message':{d:'A feature of Canvas screens where you pass a message or information relevant to your workflow from screen to screen with some simple scripting. See Interscreen Communication.',l:''},'Build mode':{d:'Canvas will attempt to build your screen, and display any results in the Output pane. The Output pane is where you can view compiler status, including success or individual error messages. Use the Output pane at any time to understand the implications of editing decisions while the screen is still in progress.',l:''},'C#':{d:'Canvas supports two scripting languages for screens and objects: C# and VB.NET. C# is the default scription language. A screen\u0027s scripting language cannot be changed after the screen is created. The default scripting language is configured in the Settings page of the Backstage view. Also see VB.NET.',l:''},'Canvas Alarm Grid':{d:'The Alarm Grid is a CygNet-aware control that supports the creation of customizable and interactive tables for the display and management of large amounts of alarm data in columns and rows. Five customizable column types are supported: Alarm, Facility, Generic, Point, and a column displaying an alarm icon, which can be customized based on alarm priority for unacknowledged alarms. Alarm columns are mapped to an alarm attribute; facility columns are mapped to a facility attribute; generic columns can display any kind of scripted data of your choice and its cells can be edited in run mode; and point columns are mapped to point attribute. Data can be filtered using custom alarm filtering rules.',l:''},'Canvas Alarm Notifier':{d:'The Alarm Notifier is an optional real-time interactive banner that displays along the top of any screen or object viewed in Canvas View and Canvas View Lite. The notifier pulls its information from the CAS where centralized alarm processing for the CVSs takes place. It displays all unacknowledged alarms in the configured services and can be used to monitor and acknowledge alarms, and view additional information about facilities and points in alarm. Alarms are displayed in priority order, with the highest priority on the left. Alarms can be filtered, and the background and text colors configured as desired. The alarm notifier can be configured to play an alarm sound (a WAV file) to signify unacknowledged alarms based on an alarm priority range, although alarm sounds can be disabled via a -noaudio command line parameter for the instance of Canvas View and Canvas View Lite. The Alarm Notifier uses navigation by facility to link to a facility\u0027s associated screen.',l:''},'Canvas Button':{d:'The Button control is a CygNet-aware tool that can be used to add square or rectangular forms to your screens, which can be easily scripted to manage user interaction with CygNet data, for example, trigger an event, confirm an action, interact with other screen controls or other screens, or even start other applications.',l:''},'Canvas Chart':{d:'The Chart is a CygNet-aware control that provides a customizable means to visualize point values and historical CygNet data in several types of charts. The Canvas chart is highly configurable and supports the following options: an unlimited number of series that can be styled as desired, optionally displaying historical rollup values; configurable date ranges, both relative and absolute; live data updates at a configured interval allowing the chart to trend data at a real-time pace; the display of time slices and tooltips; optional, configurable legend options (date and value format, dynamic text display based on real-time properties); configurable x- and y-axis features (label color, position, tick color, and title); a configurable toolbar and its position, and dragging, panning, and zooming in run mode. The chart supports CygNet data natively and non-CygNet data via script.',l:''},'Canvas Check Box':{d:'The Check Box can be used for a singular true or false option on a screen. Multiple check boxes may be added to any screen, but they operate independently of each other. The check box can be configured to display in a checked (true) state. You can also add a label to appear on the left or right of the check box and the font size of the label is customizable. Script is required to facilitate user interaction with a check box object.',l:''},'Canvas Combo Box':{d:'The Combo Box provides a drop-down list control for your screens, where a user may select one among a list of mutually exclusive values. The list of items in the drop-down list is defined using the combo box\u0027s Items property. Each item in the drop-down list has a Label and a Value, either of which can be called in script to facilitate user interaction. You can configure the list to default to the first item and add some explanatory text to guide your users when no option has been selected.',l:''},'Canvas CygNet Grid':{d:'The CygNet Grid is a CygNet-aware control that supports the creation of customizable and interactive tables for the display and management of large amounts of data in columns and rows. Four customizable column types are supported: Facility, Generic, History, and Point: facility columns are mapped to a facility attribute and can resolve to a relative facility; generic columns can display any kind of scripted data of your choice and its cells can be edited in run mode; history columns are used to add a sparkline chart in each cell for a specified UDC; point columns are mapped to a UDC and point attribute and the color can be explicitly configured or sourced from the point state color defined for the point represented in the row. The facility and SiteService are configured for the grid row and each can be explicitly set (and filtered) or sourced from other another control or the screen. Any column\u0027s background, text, and border color can be explicitly configured or sourced from the point state color defined for the associated point. Alarm indication (blinking) is supported for a point column\u0027s background, text, and border when the associated point is in alarm.',l:''},'Canvas Default Chart':{d:'A default or on-demand chart is a pre-configured chart that you can access anytime from a Canvas or Canvas View screen in design or run mode in a separate dialog box. The default chart feature provides a customizable means to open multiple default charts from a screen, and to trend selected data from different controls, such as a CygNet Grid or Text Tool control, quickly giving visual context to your data. A default chart can be associated with a Canvas screen or opened on demand from that screen in run mode. Any chart configuration can be saved with a Canvas chart file (.ccf) extension, which can be opened directly, or assigned as the default chart for a specific screen.',l:''},'Canvas Detail Control':{d:'The Detail control is a CygNet-aware tool, which displays real-time data for a single point in multiple formats within the same control. The control contains six elements: 1-3. three tokenized text strings (top, middle and bottom, each represented by a configurable static or dynamic text label based on point or facility attributes) 4. an alarm icon that can be configured to change color based on point state and change image based on alarm priority. 5.  a small sparkline with configurable line color, x- and y-axis, date ranges, both relative and absolute, and live data updates 6. an arrow that is scripted to flip the detail control when clicked and display an object of your choosing on the reverse side of the detail control. The object on the reverse side will receive its point configuration from the detail control. The last three elements (alarm icon, sparkline, and flip icon) can be toggled on or off.',l:''},'Canvas Donut':{d:'The Donut is a CygNet-aware control, which displays real-time point data on a circular linear scale. Data is represented in a ring that fills the donut in a clock-wise direction to a value between a lower and upper bound. The source of the lower value bound and upper value bound can be either hard-coded to an explicit value, or dynamically determined for each facility by sourcing the value from an application-specific attribute of the associated point (using an Indexed field or a General data field). A donut on a templated screen supports different bounds for each source facility. By using a point attribute to store the bounds (for example, Indexed 1 for the lower value bound and Indexed 2 for the upper value bound), you can have a templated screen without having to script the control. A configurable value marker is displayed on the donut to indicate the point value. A second inner ring is supported to show alarm ranges that correspond to the alarm setpoints for the associated point. A donut can optionally be labeled with three tokenized text strings, each represented by a configurable static or dynamic text label based on point or facility attributes.',l:''},'Canvas Edit Box':{d:'The Edit Box can be added to a screen to allow single-line user input. Its purpose is to take user input, which can be retrieved via script using the Text property. The input could be used in a variety of ways. One of the most common implementations is to specify the value for a setpoint command; for example, to enter a maintenance date. Explanatory text for a user can be displayed when no other text has been entered. Script is required to facilitate user interaction with an edit box object.',l:''},'Canvas Heat Map':{d:'The Heat Map is a CygNet-aware tool that can be used to display historical CygNet data in a two-dimensional representation in which data values are represented by a range of configurable colors. Its purpose is to visualize data in colored rectangular cells where the color of each cell represents the cell\u0027s value and makes it easy to compare all data values. Several other configuration properties are supported, including: configurable date ranges, both relative and absolute; historical rollup values; background, low range color, and high range color; visible color scale; cell padding, labels, and tooltips; visible top labels, and row height.',l:''},'Canvas Image':{d:'The Image is a CygNet-aware tool that can be used to display images on your screens. Supported image file formats include scalable vector graphics (.svg), bitmap (.bmp), portable network graphics (.png), jpeg (.jpg and .jpeg), and graphics interchange format (.gif). The image can be configured to display a default static image or a dynamic image that changes based on the point state of the associated point.',l:''},'Canvas Linear Gauges':{d:'The two Linear Gauge controls are CygNet-aware tools, which display real-time point data on a horizontal or vertical object. Two separate controls are supported: the Linear Gauge (Horizontal) the Linear Gauge (Vertical). Data is represented by a bar that fills the control to a calculated value between a lower and upper bound. The source of the lower value bound and upper value bound can be either hard-coded to an explicit value, or dynamically determined for each facility by sourcing the value from an application-specific attribute of the associated point (using an Indexed field, or a General data field). A guage on a templated screen supports different bounds for each source facility. By using a point attribute to store the bounds (for example, Indexed 1 for the lower value bound and Indexed 2 for the upper value bound), you can have a templated screen without having to script the control. Both linear gauges support a linear or logarithmic scale, with the scale values displayed along the bar from the lower to upper bound. A primary scale is displayed on the right side (Vertical) or bottom side (Horizontal) showing major and minor ticks. A secondary scale is displayed on the left side (Vertical) or top side (Horizontal) showing the lower and upper bound values.',l:''},'Canvas Navigator':{d:'The Navigator control is a navigation control that can be populated to display any number of Canvas screens and objects. Intrinsic to the control is a hierarchical menu on the left side, which can be configured to organize access to different categories of information. The navigation menu supports a single nested level of navigation; that is, you can configure multiple top-level menu items, each containing multiple sub-menu items. When a menu or sub-menu item is clicked a related screen will be displayed in the body of the control. The path to the linked screen can be a local or network Windows file-system folder or a CygNet APPS or BSS folder. The navigation menu includes an adaptive display mode designed to preserve screen real estate: it can be configured to minimize all menu items, display only the top-level menu icon, or display the icon and menu item label. See the Tab control for a lighter version of the navigator.',l:''},'Canvas Nested View':{d:'The Nested View is a CygNet-aware container that shows another screen, meaning you can show a screen within another screen. This allows for more templated screens or dynamic screens, which can be swapped out at run-time based on user selection. The source file path for the nested view screen can be a local or network Windows file-system folder or a CygNet APPS or BSS folder. You can add as many nested views as you want to a single screen; you can also nest as many screens as you want within a nested view – there is no limit to the number of levels within each nested view.',l:''},'Canvas Object':{d:'An Object is a simple Canvas screen containing one or more controls, which can be used on one or many screens. The controls on an object might represent assets such as a well or compressor or device or facility. Once configured, you can drop an object onto many different screens. If you need to make a single edit to any one control on an object, you simply change the master object, save the object, and all screens containing that object will be automatically updated. Any change made to an object will affect all instances of that object on any Canvas screen where it is used. Objects are analogous to templated screens in CygNet Studio. An object and a screen share the same configuration properties, events, and methods.',l:''},'Canvas Object Container':{d:'The Object Container is a CygNet-aware control that dynamically populates itself using Canvas object files (.cob) and passed-in facilities. The control determines how many Canvas objects to draw based on facility inheritance, and then fills itself in with an object for each child of the parent facility.',l:''},'Canvas Object Viewer':{d:'A special type of control that is displayed in the Properties pane when an object (.cob file) is dropped onto a screen. A Canvas Object is viewed in an Object Viewer control. An Object Viewer control has the same properties, events, and methods as the Nested View control. You can interact with an Object Viewer control via script in the same way you can with any Canvas control. An Object Viewer control can also have its own styles.',l:''},'Canvas Radio Button':{d:'The Radio Button can be used to add a list of mutually exclusive items; that is, a list from which the user can select only a single item. Script is required to attach commands to the radio button, which will be executed when the radio button is clicked in run mode. Additionally, you can define a Group name to specify which radio buttons are mutually exclusive.',l:''},'Canvas Screen':{d:'The Screen is where you create flexible and interactive diagrams and layouts for your users. By configuring a screen with controls and tools, you can create a data-rich visualization of devices, facilities, and other elements in your CygNet environment, convey information about the state of a process via charts, grids, gauges, images, and other data-visualization tools, and design workflows where objects are scripted to accept and implement an operator\u0027s control instructions in run mode.',l:''},'Canvas Search Box':{d:'The Search Box control is a powerful CygNet-aware tool for searching facilities or other objects in your CygNet environment. Two search modes are available: 1. Facility Search: This mode will search all facilities in the specified Facility service and return any matching facility names. Three options are supported when a desired search result is selected: a) Facility Sender — the search box acts as a facility sender and sends the selected facility to any controls on the screen configured to receive it. b) Navigation — the search box navigates by facility and links to the selected facility\u0027s associated screen. The navigation mode is determined by the Facility navigation mode setting on the screen displaying the search box. c) Script — an action can be scripted to execute when a facility is selected from the search results. You can limit the search box to execute a search against a Facility service associated with a current value service (CVS), against a custom filter rule, and against a list of facility properties. 2. Custom Search: In this mode the search box can be scripted to perform a custom search against any object, for example, a SQL database, a .csv file, even a web site. Further custom actions can be executed when selecting an item in the search results.',l:''},'Canvas Shape':{d:'The Shape control is a CygNet-aware tool, which supports the drawing of geometric shapes, such as ellipses, triangles, rectangles, polygons, lines, lines with arrowheads, and other custom paths on your screens. You can use one of several predefined shapes or line types or specify a geometric syntax to draw a custom path or line style. A shape\u0027s fill color, text color, and line color can be explicitly configured or sourced from the point state color defined for the associated point. Dynamic text is built using tokens, which can represent real-time CVS point properties, point configuration properties, and facility properties.',l:''},'Canvas Sparkline':{d:'The Sparkline chart is a CygNet-aware control that historical data for a single point on a single line. This lightweight line chart is drawn without axes, labels, or legend, and is typically used to understand the shape of historical data: trends up or down, highlight maximum or minimum values, and identify spikes in the data. A sparkline supports configurable line and background color, configurable x-axis and y-axis, configurable date ranges, both relative and absolute, and live data updates to allow the sparkline to request new data at a configured interval giving the appearance that the sparkline is trending data at a real-time pace. A sparkline can be added to other controls, including: a CygNet grid, a Detail control, and a Tile View control.',l:''},'Canvas Tab Control':{d:'The Tab Control is a navigation tool that incorporates a collection of tabs across the top of the control and an optional nested view linked to associated content. The tabs allow you to easily switch between different Canvas screens and objects within a single container. The path to the linked screen can be a local or network Windows file-system folder or a CygNet APPS or BSS folder. The nested view is only visible if a screen path is configured for that particular tab. The tab control is a lighter version of the Navigator.',l:''},'Canvas Tag Chooser':{d:'The Tag Chooser displays a hierarchical tree of CygNet facilities and points, allowing the creation and implementation of templated screens in Canvas. It can be used as the primary navigational control on your screens to drive other controls by passing in facilities and point values. The tag chooser supports both facility and point resolution. Point resolution is optional at the facility level and can be turned off or on simply by selecting the Show points check box at design time.',l:''},'Canvas Text Tool':{d:'The Text Tool is a CygNet-aware control that can be used to display static text, such as a label, or dynamic text based on point or facility attributes. Dynamic text is built using tokens, which can represent real-time CVS point properties, point configuration properties, and facility properties. The control can be configured with a valid point configuration but prevented from retrieving any CygNet data, allowing the display of static text while still allowing CygNet data context available from script. The control\u0027s background, text, and border color can be explicitly configured or sourced from the point state color defined for the associated point. Alarm indication (blinking) is supported for the control\u0027s text, background, and border when the associated point is in alarm.',l:''},'Canvas Tile View':{d:'The Tile View is a CygNet-aware container that displays real-time data in a series of tiled Detail controls, one for each facility provided. The tile view determines how many detail tiles to draw based on facility inheritance, and then fills itself in with a tile for each child of the parent facility, adjusting layout accordingly. The tile view allows you to build screens in a dynamic way with little maintenance, and easily add new points or facilities to a screen without additional scripting.',l:''},'Canvas Tree Map':{d:'The Tree Map is a CygNet-aware tool that can be used to display historical or real-time data as a set of relatively-sized and colored rectangles. Each rectangle has an area proportional to its numerical value. Several other configuration properties are supported, including: configurable date ranges, both relative and absolute; background, low range color, and high range color; display mode (best fit or vertically stacked); filtering to show only top or bottom items; and historical rollup values.',l:''},'Canvas Value Indicator':{d:'The Value Indicator is a CygNet-aware analog control that adds visual context to real-time point and alarm data. A data range is represented on a vertical bar that fills the control between an upper and lower bound. The source of the lower value bound and upper value bound can be either hard-coded to an explicit value, or dynamically determined for each facility by sourcing the value from an application-specific attribute of the associated point (using an Indexed field or a General data field). A value indicator on a templated screen supports different bounds for each source facility. By using a point attribute to store the bounds (for example, Indexed 1 for the lower value bound and Indexed 2 for the upper value bound), you can have a templated screen without having to script the control. Any configured alarm limits for the associated point are indicated on the bar and a triangular marker on the left side points to the current value.',l:''},'Canvas View':{d:'Canvas View is the read-only run-time companion application to Canvas (as CygNet Vision is to CygNet Studio) providing a standard multi-document interface to your Canvas screens. You can open any CygNet Studio file (.csf) in Canvas View. You can view both Canvas and Studio screens in Canvas View.',l:''},'Canvas View Lite':{d:'Canvas View Lite is a read-only run-time companion application to Canvas. Canvas View Lite utilizes a single main screen that drives all other screen navigation. It is always fullscreen and removes all user interaction that is not part of the screen’s HMI (no file menu, toolbar, backstage view, status bar, etc.). The main screen is opened via command-line using the same options as Canvas View.',l:''},'Canvas Viewer':{d:'Canvas Viewer is the internal preview window for the currently selected Canvas screen and/or object. Canvas Viewer is also used to view the current screen in debug mode. Also see Debugging.',l:''},'Color palette':{d:'Canvas supports custom color palettes, which can be configured in the Canvas settings and then applied to any screen containing CygNet-aware controls. A custom color palette will override the default point state definitions for background color and foreground color for any point type. If a custom color palette is selected for a screen, any CygNet-aware controls using Point State for color will apply the selected color palette in run mode.',l:''},'CygNet aware':{d:'Most Canvas controls are considered CygNet aware, meaning that they can be configured to show value and alarm data for a particular point or set of points, or can be connected to facility tag or SiteService/facility combination to allow for the inheritance of these properties from other controls, or the specific configuration of the SiteService or the facility, while dynamically changing the other.',l:''},'Date format':{d:'The default date format is used when displaying timestamps on Canvas screens or objects. The format can be overridden on some controls. The default date format is configured in the Settings page of the Backstage view.',l:''},'Debugging':{d:'The Canvas debugger tool allows you to observe the run-time behavior of your script and locate logic errors, by breaking execution, stepping through your code, and evaluate variables in the application. The debugger works with all Canvas programming languages.',l:''},'Design mode':{d:'Each Canvas screen and object has a Design mode and a Script mode. Use Ctrl+T to toggle between the two modes.',l:''},'Events':{d:'Every Canvas control supports many events that control the functionality, data display, appearance, and interaction of the control when applied to a Canvas screen or object. Events are available in the Events pane and the Script view.',l:''},'General settings':{d:'Canvas supports some general settings that apply to all screens and objects, including the default script language and default date format. Also see Script Language and Date Format.',l:''},'Global dictionary':{d:'Canvas provides a scripting mechanism to save a complex script object to the application\u0027s memory, which remains available as long as the instance of the application is open. Screens and Objects support the WriteToGlobalDictionary and GetGlobalDictionary.',l:''},'Global settings':{d:'All Canvas screens and objects use a set of globally configured XML-based settings compiled into a .gsf file. Global settings are common to all screens and objects and are automatically associated with a screen when it is created. Global settings include, for example, relative facility definitions, style sheets (describing colors, fonts, etc. for controls) and object library location. The location of the global settings file is configured in the Settings page of the Backstage view.',l:''},'Historical rollup':{d:'In CygNet, Historical rollups reduce the amount of data viewed thereby optimizing the amount of data you can view on one screen.',l:''},'Hyperlinking':{d:'Canvas provides the capability to open another Canvas screen, object, or nested view via script from the screen you are currently viewing. This is accomplished via script using the Hyperlink method on the sending screen and the OpenedViaHyperlink event on the receiving screen. There are four modes of hyperlinking: Open, OpenAndClose, Replace, and ReplaceWithNavigation.',l:''},'Inheritance':{d:'See Canvas Property inheritance',l:''},'Interscreen communication':{d:'Canvas provides a sophisticated broadcast feature that allows you to manipulate and pass the SiteService and facility from one screen to another using the Canvas user interface without writing script. Additionally, you can pass a message or information relevant to your workflow from screen to screen with some simple scripting, using the Broadcast Message feature.There are three types of broadcasts in Canvas that facilitate interscreen communication: SiteService broadcast, Facilities broadcast, and Message broadcast via script.',l:''},'Layers':{d:'Layers are used to show, hide, and edit multiple controls on one layer without affecting controls on another layer. All layers are listed on the Layers pane. Assign each control to a layer in the Property pane.',l:''}});