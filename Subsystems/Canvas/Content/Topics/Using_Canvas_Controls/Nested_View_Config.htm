<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Canvas.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Canvas|Using Canvas Controls and Objects|Nested View">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="description" content="Describes how to configure a nested view." /><title>Configuring a Nested View</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/NoBorder8.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/HTML5.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><a class="MCBreadcrumbsLink" href="../Canvas_Overview/Canvas.htm">Canvas</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="All_Controls.htm">Using Canvas Controls and Objects</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="Nested_View.htm">Nested View</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Configuring a Nested View</span>
        </div>
        <h2><a name="aanchor109"></a>
            <MadCap:concept term="Canvas Controls" />Configuring a Nested View</h2>
        <p>The <b>Nested View</b> has numerous properties available for configuration in the <a href="../Using_Canvas/Pane_Properties.htm">Properties</a> pane. The following topic describes a basic workflow for configuring this control. The specific appearance and functionality of the object you create depends on your needs and implementation of the control's properties, each of which is described below.</p>
        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />To configure a nested view</a></span>
            <div class="MCDropDownBody dropDownBody">
                <ol>
                    <li value="1">In design mode, create a <a href="../Using_Canvas/New_Screens_Objects_Creating.htm">new <span class="GeneralProduct_Short">Canvas</span> screen</a>.</li>
                    <li value="2">Find the nested view on the <a href="../Using_Canvas/Pane_Toolbox.htm">Toolbox</a> pane and drag a desired object to your screen.</li>
                    <li value="3">
                        <p>Use the <a href="../Popups/Settings_Pane.htm" class="MCTopicPopup MCTopicPopupHotSpot a aPopup" title="Click to learn how to user the Settings pane." data-mc-width="500px" data-mc-height="auto">Settings</a> pane to apply common settings (sizing, grouping, alignment, etc.) to this object (and others) on your screen.</p>
                    </li>
                    <li value="4">Optionally, use the <b>Name</b> property to rename the object if you plan to reference it in another screen or control, or plan to script this control.</li>
                    <li value="5">Configure the <b>Style</b> property.</li>
                </ol>
                <ol class="Lower_alpha">
                    <li value="1"><b>Style</b> — <p>The <b>Style </b>property defines the style sheet applied to an object on a screen. A style sheet consists of a predetermined list of properties and property values configured for a particular control type. </p><ul><li value="1">Click <img src="../../Resources/Images/Buttons Icons/Arrow_down.png" class="Inline" alt="Down arrow" title="Drop-down list" /> to reveal a drop-down menu of predetermined styles configured for the selected control. </li><li value="2">Select a desired style and its properties will be applied to the control.</li><li value="3">Alternately, you can create a new style based on other property values configured for the control.</li><li value="4">Or you can select <b>&lt;None&gt;</b> to remove subscription to any style.</li></ul><p>Styles are created in two ways:</p><ul><li value="1">In the control's Properties pane. Click <img src="../../Resources/Images/Buttons Icons/Style_new.png" class="Inline" alt="Add a new style" title="Click to add a new style" /> (<b>Add a new style based on this control</b>) next to the Style property, after you have configured property values in the Properties pane. See <a href="../Popups/Style_Sheets_Properties_Pane.htm" class="MCTopicPopup MCTopicPopupHotSpot a aPopup" title="Click to learn about adding a new style based on a control" data-mc-width="500px" data-mc-height="auto">Add a new style based on a control</a> for more information. </li><li value="2">In the <span class="GeneralProduct_Short">Canvas</span> Settings in the Backstage view. The default style for any control is configured in the Backstage view. See <a href="../Popups/Style_Sheets_Backstage_View.htm" class="MCTopicPopup MCTopicPopupHotSpot a aPopup" title="Click to learn about managing all styles" data-mc-width="500px" data-mc-height="auto">Manage style sheets in the Backstage</a> view for more information. </li></ul><div class="Note"><p><span class="NoteHeading">Tip:</span> You can also change a control's Style on the <a href="../Using_Canvas/Pane_Screen_Controls_View.htm">Controls view</a> of the Screen pane.</p></div></li>
                </ol>
                <ol start="6">
                    <li value="6">Configure the <b>Location</b> properties. See <a href="#Location" class="selected">To configure location, size, resizing, layer, and visibility properties</a> below.</li>
                    <li value="7">Configure the <b>Script</b> property.</li>
                </ol>
                <ol class="Lower_alpha">
                    <li value="1"><b>Include in script</b> — <p>The <b>Include in script</b> check box indicates that the control will appear in the objects collection of the screen (if scripting is enabled). To optimize performance, best practice dictates that you only include the controls you need to manipulate via script. Other controls should be excluded. When you add an event to a control, it will be automatically added to script and the Include in script property (and the <b>In Script</b> check box on the Controls view) will be set to <i>True</i>. </p><div class="Note"><p><span class="NoteHeading">Tip:</span> You can also change the Include in Script setting on the <a href="../Using_Canvas/Pane_Screen_Controls_View.htm">Controls view</a> of the Screen pane.</p></div></li>
                </ol>
                <ol start="8">
                    <li value="8">Configure the <b>Nested View</b> properties to configure specific control options (source of the nested view).</li>
                </ol>
                <ol class="Lower_alpha">
                    <li value="1"><b>CygNet connection</b> — See <a href="#CygNet" class="selected">To configure the CygNet connection</a> below.</li>
                    <li value="2"><b>Screen file source</b> — <p>This property specifies the source to the file, image, object file, or screen. Options include:</p><ul><li value="1"><b>BSS</b> — Indicates that the file is stored in a <span class="GeneralSoftwareNameShort">CygNet</span> APPS or BSS folder</li><li value="2"><b>Local</b> — Indicates that the file is stored in a local or network Windows file-system folder</li></ul><p>The default file source is <b>Local</b>.</p></li>
                    <li value="3"><b>Screen path</b> — This property specifies the path to the file, image file, object file, or screen file. Depending on the selection in the<b> source</b> property the type of path is different. Click <img src="../../Resources/Images/Buttons Icons/Browse.png" class="Inline" alt="Open dialog box" title="Configure path" /> to access either the:<br /><ul><li value="1"><b>Select File</b> dialog box — To access a <span class="GeneralSoftwareNameShort">CygNet</span> APPS or BSS folder</li><li value="2"><b>Open File</b> dialog box — To access a local or network Windows file-system folder</li></ul></li>
                    <p>Linking between <span class="GeneralProduct_Short">Canvas</span> screens, objects, and nested views is quite flexible. You don't need to specify the service or folder information in the path to find related screens, objects, or nested views, although you can if desired. When specifying a path to another file, the following notes apply:</p>
                    <p>If the screen or object file is in the APPS or BSS, you can specify the:</p>
                    <ul class="table">
                        <li value="1">full path of the file</li>
                        <li value="2">folder\filename.can of the file (<span class="GeneralProduct_Short">Canvas</span> uses the source file's service)</li>
                        <li value="3">filename.can of the file (<span class="GeneralProduct_Short">Canvas</span> uses source file's service and folder)</li>
                    </ul>
                    <p>If the screen or object file is in the local file system, you can specify the:</p>
                    <ul class="table">
                        <li value="1">full path of the file</li>
                        <li value="2">filename.can of the file (<span class="GeneralProduct_Short">Canvas</span> uses source file's path)</li>
                    </ul>
                </ol>
                <ol start="9">
                    <li value="9">Configure the <b>Generic</b> properties:</li>
                </ol>
                <ol class="Lower_alpha">
                    <li value="1"><b>String</b> — The <b>String</b> property specifies a generic string property that can be used when scripting this control. Type a string and reference it in your script as necessary.</li>
                    <li value="2"><b>Yes/No</b> — The <b>Yes/No</b> property specifies a generic Boolean yes/no property that can be used when scripting this control. Click the check box to enable the property and reference it in your script as necessary.</li>
                </ol>
                <ol start="10">
                    <li value="10">Configure the <b>General</b> properties to configure the basic properties of the object.</li>
                </ol>
                <ol class="Lower_alpha">
                    <li value="1"><b>Visible</b> — The <b>Visible</b> check box indicates whether the control is visible in run mode.<span class="NoteHeading">Tip:</span> You can also change a control's Visible setting on the <a href="../Using_Canvas/Pane_Screen_Controls_View.htm">Controls view</a> of the Screen pane.</li>
                </ol>
                <ol start="11">
                    <li value="11">Configure other nested view properties.</li>
                    <li value="12"><a href="../Using_Canvas/Saving_Screens.htm">Save the screen</a>.</li>
                    <li value="13"><a href="../Using_Canvas/Running_Screens.htm">Run the screen</a> to test your configuration.</li>
                </ol>
            </div>
        </div>
        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a name="Location"></a><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />To configure location, size, resizing, layer, and visibility properties </a></span>
            <div class="MCDropDownBody dropDownBody">
                <ol>
                    <li value="1">Find the <b>Location</b> properties and configure the size and location properties for the control:</li>
                </ol>
                <ol class="Lower_alpha">
                    <li value="1"><b>Height</b> — <p>The <b>Height</b> property specifies the height of the control (or screen). </p><div class="Note"><p><span class="NoteHeading">Tip:</span> You can also change the height of a control using the <a href="../Popups/Settings_Pane.htm" class="MCTopicPopup MCTopicPopupHotSpot a aPopup" title="Click to learn how to user the Settings pane." data-mc-width="500px" data-mc-height="auto">Settings</a> pane (click on the <img src="../../Resources/Images/Buttons Icons/Settings_cog.png" class="Inline" alt="Settings icon" title="Access Settings" /> (<b>Settings</b>) to the right of the control in design mode) or on the <a href="../Using_Canvas/Pane_Screen_Controls_View.htm">Controls view</a> of the Screen pane.</p></div></li>
                    <li value="2"><b>Horizontal resize mode</b> — <p>The <b>Horizontal resize mode</b> property specifies whether and how the control dynamically moves or resizes horizontally when the screen is resized in run mode. Options include:</p><ul><li value="1"><b>None</b> — No resizing occurs.</li><li value="2"><b>Shift</b> — The object will shift horizontally.</li><li value="3"><b>Expand</b> — The object will expand or shrink horizontally the same number of pixels as the screen.</li><li value="4"><b>Proportional</b> — The object expands or shrinks proportionally to the screen.</li></ul><p>The default value is <b>None</b>.</p></li>
                    <li value="3"><b>Layer</b> — <p>The <b>Layer</b> property specifies the layer for this control. Layers are used to show, hide, and edit multiple controls on one layer without affecting controls on another layer.</p><ul><li value="1">Type the name of the layer into the Layer field.</li><li value="2">All layers are listed on the <a href="../Using_Canvas/Pane_Layers.htm">Layers pane</a>, where you can show and hide layers for the screen in design mode and run mode.</li></ul><div class="Note"><p><span class="NoteHeading">Tip:</span> You can also edit a control's Layer on the <a href="../Using_Canvas/Pane_Screen_Controls_View.htm">Controls view</a> of the Screen pane.</p></div><p class="very_small">&#160;</p><div class="Note"><p><span class="NoteHeading">Note:</span> Layer visibility can be controlled at runtime via the <a href="Screen_Methods.htm">AddLayer</a>, <a href="Screen_Methods.htm">HideLayer</a>, and <a href="Screen_Methods.htm">ShowLayer</a> methods on the Screen object.</p></div></li>
                    <li value="4"><b>Vertical resize mode</b> — <p>The <b>Vertical resize mode</b> property specifies whether and how the control dynamically moves or resizes vertically when the screen is resized in run mode. Options include:</p><ul><li value="1"><b>None</b> — No resizing occurs.</li><li value="2"><b>Shift</b> — The object will shift vertically.</li><li value="3"><b>Expand</b> — The object will expand or shrink vertically the same number of pixels as the screen.</li><li value="4"><b>Proportional</b> — The object expands or shrinks proportionally to the screen.</li></ul><p>The default value is <b>None</b>.</p></li>
                    <li value="5"><b>Visible</b> — The <b>Visible</b> check box indicates whether the control is visible in run mode.<span class="NoteHeading">Tip:</span> You can also change a control's Visible setting on the <a href="../Using_Canvas/Pane_Screen_Controls_View.htm">Controls view</a> of the Screen pane.</li>
                    <li value="6"><b>Width</b> — <p>The <b>Width</b> property specifies the width of the control (or screen). </p><div class="Note"><p><span class="NoteHeading">Tip:</span> You can also change the width of a control using the <a href="../Popups/Settings_Pane.htm" class="MCTopicPopup MCTopicPopupHotSpot a aPopup" title="Click to learn how to user the Settings pane." data-mc-width="500px" data-mc-height="auto">Settings</a> pane (click on the <img src="../../Resources/Images/Buttons Icons/Settings_cog.png" class="Inline" alt="Settings icon" title="Access Settings" /> (<b>Settings</b>) to the right of the control in design mode) or on the <a href="../Using_Canvas/Pane_Screen_Controls_View.htm">Controls view</a> of the Screen pane.</p></div></li>
                    <li value="7"><b>X</b> — <p>The <b>X</b> property specifies the location of the control along the horizontal axis. Use the up, down, left, and right arrow keys to nudge a control by 1 pixel. Arrow moves a control by 1 pixel. Ctrl+Arrow moves a control by 10 pixels. Ctrl+Shift+Arrow moves a control by 100 pixels. </p><div class="Note"><p><span class="NoteHeading">Tip:</span> You can also change the location of the control using the <a href="../Popups/Settings_Pane.htm" class="MCTopicPopup MCTopicPopupHotSpot a aPopup" title="Click to learn how to user the Settings pane." data-mc-width="500px" data-mc-height="auto">Settings</a> pane; click on the <img src="../../Resources/Images/Buttons Icons/Settings_cog.png" class="Inline" alt="Settings icon" title="Access Settings" /> (<b>Settings</b>) to the right of the control in design mode.</p></div></li>
                    <li value="8"><b>Y</b> — <p>The <b>Y</b> property specifies the location of the control along the vertical axis. Use the up, down, left, and right arrow keys to nudge a control by 1 pixel. Arrow moves a control by 1 pixel. Ctrl+Arrow moves a control by 10 pixels. Ctrl+Shift+Arrow moves a control by 100 pixels. </p><div class="Note"><p><span class="NoteHeading">Tip:</span> You can also change the location of the control using the <a href="../Popups/Settings_Pane.htm" class="MCTopicPopup MCTopicPopupHotSpot a aPopup" title="Click to learn how to user the Settings pane." data-mc-width="500px" data-mc-height="auto">Settings</a> pane; click on the <img src="../../Resources/Images/Buttons Icons/Settings_cog.png" class="Inline" alt="Settings icon" title="Access Settings" /> (<b>Settings</b>) to the right of the control in design mode.</p></div></li>
                    <li value="9"><b>Z index</b> — <p>The <b>Z index</b> property is used to determine the order in which controls are layered on top of each other. Controls with higher values will draw on top of those with lower values. The newest control added to a screen will always have the highest value and will be the top layer. Two or more controls can be on the same index (layer). </p><div class="Note"><p><span class="NoteHeading">Tip:</span> You can also change the Z index of a control using the <a href="../Popups/Settings_Pane.htm" class="MCTopicPopup MCTopicPopupHotSpot a aPopup" title="Click to learn how to user the Settings pane." data-mc-width="500px" data-mc-height="auto">Settings</a> pane (click on the <img src="../../Resources/Images/Buttons Icons/Settings_cog.png" class="Inline" alt="Settings icon" title="Access Settings" /> (<b>Settings</b>) to the right of the control in design mode) or on the <a href="../Using_Canvas/Pane_Screen_Controls_View.htm">Controls view</a> of the Screen pane.</p></div></li>
                </ol>
                <ol start="2">
                    <li value="2">Configure any other nested view properties.</li>
                    <li value="3"><a href="../Using_Canvas/Saving_Screens.htm">Save the screen</a>.</li>
                    <li value="4"><a href="../Using_Canvas/Running_Screens.htm">Run the screen</a> to test your configuration.</li>
                </ol>
            </div>
        </div>
        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a name="CygNet"></a><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />To configure the CygNet connection</a></span>
            <div class="MCDropDownBody dropDownBody">
                <p>The source of your CygNet data can be explicitly configured for the control or it can be inherited from the screen or another control.</p>
                <ol>
                    <li value="1">Expand the <b>CygNet </b>property group to reveal the <b>CygNet connection</b> property — The <b>CygNet connection </b>property is used to configure the facility and SiteService associated with this control or screen. Two selection modes are available: a) by <b>Facility tag</b> or b) by <b>SiteService / Facility</b>. This split configuration allows for the inheritance of these properties from other controls, or the specific configuration of the SiteService <i>or</i> the facility, while dynamically changing the other. This use case may be rare; therefore, the <b>Facility tag</b> option is the default. Click <img src="../../Resources/Images/Buttons Icons/Arrow_down.png" class="Inline" alt="Down arrow" title="Expand property" /> to reveal a drop-down area where you can configure the <b>Selection mode</b>, source <b>SiteService</b>, and source <b>Facility</b>. Each option is described below.</li>
                </ol>
                <ol class="Lower_alpha">
                    <li value="1"><b>Selection mode</b> — <p>The <b>Selection mode</b> property is used to determine how the control will receive CygNet information from other controls. Two options are available; click the desired radio button:</p><ul><li value="1"><b>Facility tag</b> — The <b>Facility tag</b> selector consists of a <b>Source</b> chooser and <b>Resolve to a relative facility</b> check box. If the <b>Source</b> is <b>&lt;Self&gt;</b> a <b>Facility tag</b> selector and relative facility options are also displayed. <b>Facility tag</b> is the default option.</li><li value="2"><b>SiteService / Facility</b> — The <b>SiteService / Facility</b> selector consists of <b>Source</b> and <b>SiteService</b> and facility choosers.</li></ul><h4>Sending and receiving facility tags</h4><p>Some controls on the same screen allow for the sending of facility tag information from one control to another. </p><ol><li value="1">On the sending control configure the <b>Facility sender mode</b> property to send facility tag information to another control on the same screen. </li><li value="2">On the receiving control configure the <b>Selection mode</b> property (in either <b>CygNet connection</b> or <b>Point configuration</b> section) to <i>Facility tag</i> and select the <b>Facility Source</b> to the sending control. </li><li value="3">On the receiving control configure a display tag that associates to a facility property, e.g. %FacilityTag%.</li></ol></li>
                </ol>
                <ol class="Lower_alpha" start="2">
                    <li value="2"><b>SiteService</b> — The <b>SiteService</b> property is where you specify the source of the SiteService for the control (or screen) to use. The source for the SiteService can be explicitly configured for this control or it can be inherited from another control on the same screen, or from the screen, or from another screen. Click <img src="../../Resources/Images/Buttons Icons/Arrow_down.png" class="Inline" alt="Down arrow" title="Expand property" /> to reveal the <b>SiteService</b> selector. Options include:</li>
                    <ul>
                        <li value="1"><b>Source</b> — Options include <b>&lt;Self&gt;</b> or <b>Screen</b> (default):		
					<ul style="list-style-type: circle;"><li value="1"><b>&lt;Self&gt;</b> — Select <b>&lt;Self&gt;</b> to explicitly configure the SiteService for this control. A <b>SiteService </b>selector is displayed:<ul style="list-style-type: square;"><li value="1"><b>SiteService</b> — The <b>SiteService</b> property specifies the SiteService for which the control (or screen) is to display data. Click <img src="../../Resources/Images/Buttons Icons/Browse.png" class="Inline" alt="Open dialog box" title="Browse for service" /> to select a service using the <a href="../Popups/Select_SiteService.htm" class="MCTopicPopup MCTopicPopupHotSpot a aPopup" title="Click to learn how to select a SiteService." data-mc-width="500px" data-mc-height="auto">Select Service</a> dialog box.</li></ul></li></ul></li>
                        <ul style="list-style-type: circle;">
                            <li value="1"><b>Screen</b> — Select <b>Screen</b> to inherit the SiteService from the screen for this control. By default, the sender is the <b>Screen</b> control if no other senders have been configured.</li>
                        </ul>
                    </ul>
                </ol>
                <ol class="Lower_alpha" start="3">
                    <li value="3"><b>Facility</b> — The <b>Facility tag</b> or <b>Facility</b> property is where you specify the source of the facility for the control (or screen) to use. The source for the facility can be explicitly configured for this control or it can be inherited from another control on the same screen, or from the screen, or from another screen. Click <img src="../../Resources/Images/Buttons Icons/Arrow_down.png" class="Inline" alt="Down arrow" title="Expand property" /> to reveal the <b>Facility tag</b> or <b>Facility</b> selector. Options include: Click <img src="../../Resources/Images/Buttons Icons/Arrow_down.png" class="Inline" alt="Down arrow" title="Expand property" /> to reveal the <b>Facility </b>selector. Options include:</li>
                    <ul>
                        <li value="1"><b>Source</b> — Options include <b>&lt;Self&gt;</b>, <b>Screen</b> (default), or a list of <b>Sender</b> controls.</li>
                        <ul style="list-style-type: circle;">
                            <li value="1"><b>&lt;Self&gt;</b> — Select <b>&lt;Self&gt;</b> to explicitly configure the facility for this control. A <b>Facility tag</b> or <b>Facility </b>selector is displayed, depending on the <b>Selection mode</b>: <ul style="list-style-type: square;"><li value="1"><b>Facility</b> — The <b>Facility</b> property specifies the facility for which the control (or screen) is to display data. Click <img src="../../Resources/Images/Buttons Icons/Browse.png" class="Inline" alt="Open dialog box" title="Browse for facility" /> to select a facility using the <a href="../Popups/Select_Facility.htm" class="MCTopicPopup MCTopicPopupHotSpot a aPopup" title="Click to learn how to select a facility." data-mc-width="500px" data-mc-height="auto">Select Facility</a> dialog box.</li><li value="2"><b>Facility Tag</b> — The <b>Facility tag</b> property specifies the full facility tag identifier for which the control (or screen) is to display data. Click <img src="../../Resources/Images/Buttons Icons/Browse.png" class="Inline" alt="Open dialog box" title="Browse for facility tag" /> to select a facility using the <a href="../Popups/Select_Facility_Tag.htm" class="MCTopicPopup MCTopicPopupHotSpot a aPopup" title="Click to learn how to select a facility tag." data-mc-width="500px" data-mc-height="auto">Select Facility Tag</a> dialog box.</li></ul></li>
                        </ul>
                        <ul style="list-style-type: circle;">
                            <li value="1"><b>Screen</b> — Select <b>Screen</b> to inherit the facility from the screen for this control. By default, the sender is the <b>Screen</b> control if no other senders have been configured. Once <b>Screen</b> is selected <b>Inherited from Screen</b> will display for the Facility property.</li>
                        </ul>
                        <ul style="list-style-type: circle;">
                            <li value="1"><b>Sender</b> — A list of sender controls that have been configured with a facility will be displayed. Select the name of the control that will send its facility to this control. By default, the sender is the <b>Screen</b> control if no other senders have been configured. Once a sender control has been specified its name will display in the <b>Source</b> field.</li>
                        </ul>
                    </ul>
                    <ul>
                        <li value="1"><b>Resolve to a relative facility</b> — The <b>Resolve to a relative facility</b> check box redirects the source of the facility to a relative facility, overriding the configured source facility. Once selected a list of configured <b>Relative links</b> is displayed. See <a href="../Relative_Facilities/Relative_Facilities_Using.htm">Using Relative Facilities in Canvas</a> for more information about configuring and scripting relative facility links.<ul style="list-style-type: circle;"><li value="1"><b>Relative link</b> — The <b>Relative link</b> property specifies a list of all available relative facility paths. Click <img src="../../Resources/Images/Buttons Icons/Arrow_down.png" class="Inline" alt="Down arrow" title="Expand property" /> to reveal a drop-down menu of all available relative facility definitions (relative links). Select a link from the list. If an order-in-type attribute is specified for the selected link, the <b>Order in type</b> field will display.</li><li value="2"><b>Order in type</b> — The <b>Order in type</b> property specifies the attribute value used to represent the order in type (facility ordinal) if the relative facility definition is configured for one. It is possible to have multiple relative facility definition sets with the same definition name. In this case, if the specified <b>Relative link</b> is configured for ordinalization, then you need to configure the attribute value in the box.</li></ul></li>
                    </ul>
                </ol>
                <ol start="2">
                    <li value="2">Configure other control properties as necessary.</li>
                    <li value="3"><a href="../Using_Canvas/Saving_Screens.htm">Save the screen</a>.</li>
                    <li value="4"><a href="../Using_Canvas/Running_Screens.htm">Run the screen</a> to test your configuration.</li>
                </ol>
            </div>
        </div>
        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a name="Communicate"></a><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />To communicate between screens in a nested view via script</a></span>
            <div class="MCDropDownBody dropDownBody">
                <p><span class="GeneralProduct_Short">Canvas</span> has streamlined the mechanism for communicating from a parent screen down to a child screen and from a child screen up to a parent screen allowing for more refined sub-screen messaging and manipulation. A parent screen can call on a nested screen to pass in a message and/or an object to a child nested screen and vice versa.</p>
                <h3>SendMessage method</h3>
                <p>Use the <b>SendMessage</b> method on any nested screen to pass in a message to another nested screen. In addition to messages, you can also send and receive objects which can be used to manipulate the receiving screen, including:</p>
                <ul>
                    <li value="1">the sending parent or child screen itself</li>
                    <li value="2">message arguments that allow access to all controls and properties in the receiving screen</li>
                    <li value="3">controls (for example, a grid or button)</li>
                    <li value="4">data structures</li>
                    <li value="5">lists</li>
                </ul>
                <p>In the following examples, a parent screen calls on the nested view to pass in a message to the child screen ("Message from Parent to Child") and includes an object, which can be anything the sender wants. In this case, the sender (the child screen) sends a reference to its screen properties to the receiver (the parent screen). Since now the parent’s script has a reference to the child’s screen properties, the parent can make changes to those properties, such as changing the SiteService or facility. Here, it changes the child screen’s background color to orange.</p>
                <p>In the second example, the child screen returns a message ("Message from Child to Parent") and includes an object to change the parent screen’s background color to pink.</p>
                <p class="Example">Example — Send and receive a message or object from a parent screen</p>
                <p>The following code example shows how a parent screen sends and receives a message and object:</p>
                <table class="Code" summary="Code example">
                    <tr>
                        <td>
                            <p class="Code">{</p>
                            <p class="Code2">public class ScreenClass</p>
                            <p class="Code2">{</p>
                            <p class="Code3">public static void Main()</p>
                            <p class="Code3">{</p>
                            <p class="Code4">ScreenClass c = new ScreenClass();</p>
                            <p class="Code3">}</p>
                            <p class="Code3">public ScreenClass()</p>
                            <p class="Code3">{</p>
                            <p class="Code4">// control event handler code goes here -- do not modify</p>
                            <p class="Code4">Objects.Button1.Click += new EventHandler(this.Button1_Click);</p>
                            <p class="Code4">Objects.Screen.NestedViewMessageReceived += new EventHandler(this.Screen_NestedViewMessageReceived);</p>
                            <p class="Code4">Objects.Button2.Click += new EventHandler(this.Button2_Click);</p>
                            <p class="Code3">}</p>
                            <p class="Code3">#region Button2</p>
                            <p class="Code3">private void Button2_Click(object sender, EventArgs args)</p>
                            <p class="Code3">{</p>
                            <p class="Code4">// send a message from the Parent to the nested Child screen</p>
                            <p class="Code4">Objects.View1.SendMessage("Message from Parent to Child", Objects.Screen);</p>
                            <p class="Code3">}</p>
                            <p class="Code3">#endregion</p>
                            <p class="Code3">&#160;</p>
                            <p class="Code3">#region Screen</p>
                            <p class="Code3">private void Screen_NestedViewMessageReceived(object sender, EventArgs args)</p>
                            <p class="Code3">{</p>
                            <p class="Code4">// process message sent from the nested Child screen</p>
                            <p class="Code4">var messageArguments = args as NestedViewMessageEventArgs;</p>
                            <p class="Code4">var child = messageArguments.Data as CanvasScreenPropertiesViewModel;</p>
                            <p class="Code4">MessageBox.Show("Message received from nested screen: " + messageArguments.ID);</p>
                            <p class="Code4">child.BackgroundColor = "Orange";</p>
                            <p class="Code3">}</p>
                            <p class="Code3">#endregion</p>
                            <p class="Code3">#region Button1</p>
                            <p class="Code3">private void Button1_Click(object sender, EventArgs args)</p>
                            <p class="Code3">{</p>
                            <p class="Code4">// send a message from the Parent to the nested Child screen</p>
                            <p class="Code4">Objects.View1.SendMessage("Message from Parent to Child", Objects.Screen);</p>
                            <p class="Code3">}</p>
                            <p class="Code3">#endregion</p>
                            <p class="Code2">}</p>
                            <p class="Code">}</p>
                        </td>
                    </tr>
                </table>
                <p class="Example">Example — Send and receive a message or object from a child screen</p>
                <p>The following code example shows how a child screen sends and receives a message and object:</p>
                <table class="Code" summary="Code example">
                    <tr>
                        <td>
                            <p class="Code">{</p>
                            <p class="Code2">public class ScreenClass</p>
                            <p class="Code2">{</p>
                            <p class="Code3">public static void Main()</p>
                            <p class="Code3">{</p>
                            <p class="Code4">ScreenClass c = new ScreenClass();</p>
                            <p class="Code3">}</p>
                            <p class="Code3">public ScreenClass()</p>
                            <p class="Code3">{</p>
                            <p class="Code4">// control event handler code goes here -- do not modify</p>
                            <p class="Code4">Objects.Button1.Click += new EventHandler(this.Button1_Click);</p>
                            <p class="Code4">Objects.Screen.NestedViewMessageReceived += new EventHandler(this.Screen_NestedViewMessageReceived);</p>
                            <p class="Code3">}</p>
                            <p class="Code3">#region Screen</p>
                            <p class="Code3">private void Screen_NestedViewMessageReceived(object sender, EventArgs args)</p>
                            <p class="Code3">{</p>
                            <p class="Code4">// process message sent from Parent</p>
                            <p class="Code4">var messageArguments = args as NestedViewMessageEventArgs;</p>
                            <p class="Code4">var parent = messageArguments.Data as CanvasScreenPropertiesViewModel;</p>
                            <p class="Code4">MessageBox.Show("Message received: " + messageArguments.ID);</p>
                            <p class="Code4">parent.BackgroundColor = "Pink";</p>
                            <p class="Code3">}</p>
                            <p class="Code3">#endregion</p>
                            <p class="Code3">&#160;</p>
                            <p class="Code3">#region Button1</p>
                            <p class="Code3">private void Button1_Click(object sender, EventArgs args)</p>
                            <p class="Code3">{</p>
                            <p class="Code4">// send message from Child to Parent</p>
                            <p class="Code4">Objects.Screen.SendParentMessage("Message from Child to Parent", Objects.Screen);</p>
                            <p class="Code3">}</p>
                            <p class="Code3">#endregion</p>
                            <p class="Code2">}</p>
                            <p class="Code">}</p>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <hr width="100%" size="1" />
        <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/NoBorder8.css');" summary="MasterFooter" class="TableStyle-NoBorder8" cellspacing="0">
            <col class="TableStyle-NoBorder8-Column-Column1" />
            <col class="TableStyle-NoBorder8-Column-Column1" />
            <tbody>
                <tr class="TableStyle-NoBorder8-Body-Body1">
                    <td class="TableStyle-NoBorder8-BodyB-Column1-Body1">
                        <p><a href="mailto:softwaredocs.feedback@weatherford.com?subject=Documentation%20feedback"><img src="../../Resources/Images/Buttons Icons/Feedback_footer.png" alt="Let us know how we can improve this topic." title="Let us know how we can improve this topic." class="Inline" /></a>
                        </p>
                    </td>
                    <td class="TableStyle-NoBorder8-BodyA-Column1-Body1">
                        <p class="MasterFooterContact"><a href="https://www.weatherford.com/en/products-and-services/production/production-4-0/iot-scada-platform//" target="_blank"><img src="../../Resources/Images/General/WFT_31x21.png" alt="CygNet at weatherford.com" title="CygNet at weatherford.com" /></a>
                        </p>
                        <p class="MasterFooterContact">© <span class="GeneralCurrentYear">2020</span> Weatherford. All rights reserved.</p>
                    </td>
                </tr>
            </tbody>
        </table>
    </body>
</html>